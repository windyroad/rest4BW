<?xml version="1.0" encoding="UTF-8"?>
<project default="pre-commit"
         name="rest4BW"
         xmlns="antlib:org.apache.tools.ant"
         xmlns:bwubuild="org.windyroad.bwunit.build"
         xmlns:bwunit="org.windyroad.bwunit"
         xmlns:tibant="org.windyroad.tibant"
         xmlns:ivy="antlib:org.apache.ivy.ant"
         xmlns:curl="org.windyroad.curl"
         xmlns:assembla="org.windyroad.assembla"
         xmlns:milestone="org.windyroad.assembla.milestone"
         xmlns:ticket="org.windyroad.assembla.ticket"
         xmlns:wp="org.windyroad.wordpress">

	<echo>LOADING: ${user.home}/${ant.project.name}.properties</echo>
	<property file="${user.home}/${ant.project.name}.properties" />
	<echo>LOADING: ${user.home}/build.properties</echo>
	<property file="${user.home}/build.properties" />
	<property name="config.filename" value="${user.name}.properties" />
	<echo>LOADING: config/${config.filename}</echo>
	<property file="config/${config.filename}" />
	<echo>LOADING: config/default.properties</echo>
	<property file="config/default.properties" />

	<defaultexcludes echo="false" add="**/*.hg" />
	<defaultexcludes echo="false" add="**/*.hg/**" />

	<property name="ivy.install.version" value="2.2.0" />
	<property name="ivy.jar.dir" location="${user.home}/.ivy2/jars" />
	<property name="ivy.jar.file" location="${ivy.jar.dir}/ivy-${ivy.install.version}.jar" />

	<property name="bwunit.home" location="lib/bwunit" />
	<property name="rest4BW.projlib" location="build/rest4BW.projlib" />
	<import file="lib/bwunit/util/bwunit.xml" optional="true" />

	<target name="-load-ant-contrib" depends="retrieve" unless="ant-contrib.loaded">
		<tibant:load-ant-contrib />
		<property name="ant-contrib.loaded" value="true" />
	</target>

	<target name="validate" depends="-load-ant-contrib">
		<bwunit:validate-project dir="src/main/bw" project="rest4BW" max-warnings="0" create-dtl-file="true" />
	</target>

	<target name="projlib" depends="-load-ant-contrib,validate">
		<tibant:build-library lib="/Build/rest4BW"
		                      dir="src/main/bw"
		                      project="rest4BW"
		                      out="${rest4BW.projlib}"
		                      validate="false"
		                      create-dtl-file="true" />
	</target>

	<target name="init">
		<mkdir dir="build" />
	</target>

	<target name="-determine-version" depends="-load-ivy,-load-ant-contrib">
		<if>
			<equals arg1="${ivy.resolver}" arg2="local" />
			<then>
				<tstamp>
					<format property="publish.revision" pattern="yyyyMMdd-HHmmss" />
				</tstamp>
			</then>
			<else>
				<echo level="info">Getting Release Version...</echo>

				<property name="default.base.revision" value="1" />

				<ivy:buildnumber organisation="${ivy.organisation}"
				                 module="${ivy.module}"
				                 default="${default.base.revision}"
				                 resolver="releases"
				                 prefix="releases" />

				<echo level="info">Releases Version: ${releases.new.revision}</echo>
				<echo level="info">Getting Snapshots Version...</echo>
				<ivy:buildnumber organisation="${ivy.organisation}"
				                 module="${ivy.module}"
				                 revision="${releases.new.revision}"
				                 resolver="snapshots"
				                 prefix="snapshots" />
				<echo level="info">Snapshots Version: ${snapshots.new.revision}</echo>
				<propertycopy name="publish.revision" from="${ivy.resolver}.new.revision" />
			</else>
		</if>
		<!-- not sure why I'm doing the next line -->
		<ivy:buildnumber organisation="${ivy.organisation}" module="${ivy.module}" resolver="local" prefix="local" />
		<propertycopy name="current.publish.revision" from="${ivy.resolver}.revision" silent="true" />
		<echo>Publish Version: ${publish.revision}</echo>
		<echo>Currently Published Version: ${current.publish.revision}</echo>
	</target>

	<target name="check-version" depends="-determine-version" description="" />

	<macrodef name="check-dir-exists" description="Checks whether a directory exists.">
		<attribute name="dir" />
                <attribute name="reportonly" default="false" />
		<sequential>
		  <if>
                    <not><available file="@{dir}"/></not>
		    <then>
          <if>
            <istrue value="@{reportonly}" />
            <then>
		          <echo message="WARN: The directory '@{dir}' does not exist!" />
            </then>
            <else>
		          <fail message="ERROR: The directory '@{dir}' does not exist!" />
            </else>
          </if>
		    </then>
		  </if>
		</sequential>
	</macrodef>

	<macrodef name="check-tibco-config" description="Checks whether tibco home directories exist.">
    <attribute name="reportonly" default="false" />
    <sequential>
		  <propertyselector property="tmp_tibco_dirs" match="tibco\.home\.(.*)" select="\1"/>
		  <for list="${tmp_tibco_dirs}" param="id">
		  <sequential>
			  <if>
			    <not><equals arg1="@{id}" arg2="jre"/></not>
			    <then>
				    <check-dir-exists dir="${tibco.home.@{id}}" reportonly="@{reportonly}" />	
			     </then>
			  </if>
		  </sequential>
		  </for>
    </sequential>
	</macrodef>

  <target name="report-tibco-config" depends="-load-ant-contrib" description="Reports whether the tibco.home.* properties have been correctly configured.">
    <check-tibco-config reportonly="true" /> 
  </target>

  <target name="-assert-tibco-config" description="Validates whether the tibco.home.* properties have been correctly configured.">
    <check-tibco-config /> 
  </target>

	<target name="designer" depends="-load-ant-contrib,-assert-tibco-config" description="Launch ${ant.project.name} in TIBCO Designer">
		<bwunit:designer dir="src/main/bw" project="rest4BW" create-dtl-file="true" />
	</target>

	<target name="clean" description="">
		<delete dir="build" verbose="true" />
		<delete dir="logs" verbose="true" />
		<delete verbose="true">
			<fileset dir="src/main/bw" includes="**/.designtimelibs" />
		</delete>
		<delete dir="working" verbose="true" />
		<subant target="clean">
			<fileset dir="Examples" includes="**/build.xml" />
		</subant>
	</target>

	<target name="clean-lib" description="">
		<delete dir="lib" verbose="true" />
	</target>

	<target name="clean-all" depends="clean,clean-lib" description="" />

	<target name="build" depends="projlib" description="Build binaries" />

	<target name="-download-ivy" unless="ivy.downloaded">
		<mkdir dir="${ivy.jar.dir}" />
		<!-- download Ivy from web site so that it can be used even without any special installation -->
		<echo message="installing ivy..." />
		<get src="http://repo1.maven.org/maven2/org/apache/ivy/ivy/${ivy.install.version}/ivy-${ivy.install.version}.jar"
		     dest="${ivy.jar.file}"
		     usetimestamp="true"
		     verbose="true" />
	</target>

	<target name="-check-ivy-downloaded">
		<condition property="ivy.downloaded">
			<available file="${ivy.jar.file}" />
		</condition>
	</target>

	<target name="-load-ivy" depends="-check-ivy-downloaded,-download-ivy" unless="ivy.loaded">
		<path id="ivy.lib.path">
			<fileset dir="${ivy.jar.dir}" includes="*.jar" />
		</path>
		<taskdef resource="org/apache/ivy/ant/antlib.xml" uri="antlib:org.apache.ivy.ant" classpathref="ivy.lib.path" />
		<property name="ivy.report.todir" location="build/ivy" />
		<ivy:configure file="config/ivysettings.xml" />
		<ivy:resolve file="${ivy.dep.file}" conf="${ivy.configurations}" />
		<property name="ivy.loaded" value="true" />
	</target>

	<target name="-check-bwunit-uptodate" description="retrieve dependancies with ivy" depends="-ivy-retrieve">
		<condition property="bwunit-outofdate">
			<or>
				<not>
					<isfileselected file="lib/bwunit">
						<type type="dir" />
					</isfileselected>
				</not>
				<uptodate property="bwunit-uptodate">
					<srcfiles dir="lib/bwunit" includes="**" />
					<mapper type="merge" to="${bwunit.BWUnit}" />
				</uptodate>
			</or>
		</condition>
	</target>

	<target name="-unpack-bwunit"
	        description="retrieve dependancies with ivy"
	        depends="-check-bwunit-uptodate"
	        if="bwunit-outofdate">
		<unzip dest="lib/bwunit" src="${bwunit.BWUnit}" overwrite="true" />
	</target>

	<target name="-ivy-retrieve" description="retrieve dependancies with ivy" depends="-load-ivy">
		<ivy:retrieve />
		<ivy:artifactproperty name="[module].[artifact]" value="lib/[artifact]-[revision].[ext]" />
	</target>

	<target name="retrieve" description="retrieve dependancies" depends="-ivy-retrieve,-unpack-bwunit" />

	<macrodef name="gen-doc"
	          uri="org.windyroad.bwunit.build"
	          description="builds a html document from an Apache Ant file">
		<attribute name="in" description="The Ant file to create documentation for" />
		<attribute name="out" description="The file to write the documentation to" />
		<attribute name="version" description="The version number to include in the documentation" default="" />
		<attribute name="name"
		           description="The name of the type of document being produced. e.g., `Build Guide`"
		           default="User Guide" />
		<attribute name="force"
		           description="Force creation of the output document, even if the input hasn't changed"
		           default="false" />
		<attribute name="validate" description="validate the generated document" default="true" />
		<attribute name="classpath" default="${saxon.jar.path}" description="the classpath to the saxon jar" />
		<attribute name="taskname" default="bwubuild:gendoc" />
		<sequential>
			<outofdate force="@{force}">
				<sourcefiles>
					<pathelement path="@{in}" />
					<pathelement path="util/xslt/userguide.xslt" />
				</sourcefiles>
				<targetfiles path="@{out}" />
				<sequential>
					<tibant:xslt in="@{in}" out="@{out}" style="util/xslt/userguide.xslt">
						<arg value="version=@{version}" />
						<arg value="doc-name=@{name}" />
					</tibant:xslt>

				</sequential>
			</outofdate>
			<if>
				<istrue value="@{validate}" />
				<then>
					<echo level="info">Validating Result...</echo>
					<schemavalidate failonerror="true" warn="true">
						<fileset dir="." includesfile="@{out}">
						</fileset>
						<schema namespace="http://www.w3.org/XML/1998/namespace" file="test/antunit/data/xml.xsd" />
						<schema namespace="http://www.w3.org/1999/xhtml" file="test/antunit/data/xhtml-strict.xsd" />
						<schema namespace="http://www.w3.org/2001/XMLSchema" file="test/antunit/data/XMLSchema.xsd" />
						<dtd publicId="-//W3C//DTD XHTML 1.0 Strict//EN"
						     location="test/antunit/data/xhtml1-strict.dtd" />
						<dtd publicId="-//W3C//ENTITIES Latin 1 for XHTML//EN"
						     location="test/antunit/data/xhtml-lat1.ent" />
						<dtd publicId="-//W3C//ENTITIES Symbols for XHTML//EN"
						     location="test/antunit/data/xhtml-symbol.ent" />
						<dtd publicId="-//W3C//ENTITIES Special for XHTML//EN"
						     location="test/antunit/data/xhtml-special.ent" />
					</schemavalidate>
					<echo level="info">...Validated</echo>
				</then>
			</if>
		</sequential>
	</macrodef>

	<target name="doc" description="builds user guide" depends="retrieve,-determine-version">
		<mkdir dir="build" />
		<bwubuild:gen-doc in="util/bwunit.xml"
		                  out="build/${ant.project.name}-User-Guide.html"
		                  version="${releases.new.revision}" />
	</target>

	<target name="publish" depends="build,-determine-version" description="">
		<echo message="Ivy Resolver - ${ivy.resolver}" />
		<fail message="Cannot publish directly to releases">
			<condition>
				<equals arg1="${ivy.resolver}" arg2="releases" />
			</condition>
		</fail>
		<echo level="info"
		      message="publishing ${ant.project.name} to ${ivy.resolver} with version ${publish.revision}..." />
		<ivy:publish artifactspattern="build/[artifact].[ext]"
		             resolver="${ivy.resolver}"
		             pubrevision="${publish.revision}"
		             status="integration"
		             overwrite="true"
		             update="true"
		             conf="default" />
		<echo level="info" message="...published" />
		<echo file="build/pubrevision.properties">version=${publish.revision}</echo>
	</target>

	<target name="promote" depends="-determine-version" description="">
		<echo>Promoting Snapshot Version: ${snapshots.revision}
To Releases Version: ${releases.new.revision}</echo>
		<ivy:retrieve organisation="${ivy.organisation}"
		              module="${ivy.module}"
		              revision="${snapshots.revision}"
		              inline="true"
		              transitive="false"
		              conf="default" />
		<ivy:publish artifactspattern="lib/[artifact]-${snapshots.revision}.[ext]"
		             resolver="releases"
		             pubrevision="${releases.new.revision}"
		             status="release"
		             overwrite="false"
		             update="true"
		             forcedeliver="true"
		             delivertarget="-publish-recurse"
		             conf="default" />
		<echo file="build/pubrevision.properties">version=${releases.new.revision}</echo>
	</target>

	<target name="-publish-recurse">
		<echo>IN -publish-recurse</echo>
		<echoproperties prefix="dependency" />
		<fail>Not implemented</fail>
	</target>

	<macrodef name="run-bwunit-tests"
	          uri="org.windyroad.bwunit.build"
	          description="runs the bwunit tests and by default fails the build on the first error">
		<attribute name="phase" />
		<attribute name="failonerror" default="true" />
		<sequential>
			<loadfile property="bwunit.license" srcfile="${bwunit.license.file}" />
			<for param="testsuite">
				<dirset dir="src/main/bw" includes="**/test/@{phase}TestSuite" id="@{phase}.dirs" />
				<sequential>
					<dirname property="@{testsuite}.project.path" file="@{testsuite}/.." />
					<basename property="@{testsuite}.project.name" file="${@{testsuite}.project.path}" />
					<mkdir dir="build/@{phase}/${@{testsuite}.project.name}" />
					<echo message=">>> Found Test Suite - @{testsuite} , ${@{testsuite}.project.path} , ${@{testsuite}.project.name}" />
					<bwunit:run-tests dir="${@{testsuite}.project.path}/.."
					                  project="${@{testsuite}.project.name}"
					                  result-dest-dir="build/@{phase}/${@{testsuite}.project.name}"
					                  force="${bwunit.force}"
					                  failonerror="@{failonerror}"
					                  license="${bwunit.license}"
					                  create-dtl-file="true"
					                  scope="test/@{phase}TestSuite/" />
				</sequential>
			</for>
		</sequential>
	</macrodef>

	<macrodef name="report-bwunit-tests"
	          uri="org.windyroad.bwunit.build"
	          description="runs the bwunit tests and reports on all tests passed and failed.">
		<attribute name="phase" />
		<sequential>
			<bwubuild:run-bwunit-tests phase="@{phase}" failonerror="false" />
			<for param="testsuite">
				<dirset refid="@{phase}.dirs" />
				<sequential>
					<bwunit:convert-to-junit-results file="build/@{phase}/${@{testsuite}.project.name}/results.xml"
					                                 tofile="build/@{phase}/${@{testsuite}.project.name}.xml" />
				</sequential>
			</for>
		</sequential>
	</macrodef>

	<target name="validate-projlib" description="Validate the compiled projlib">
		<tibant:designer dir="src/main/bw" project="rest4BW" expected-errors="0" max-warnings="0" />
	</target>

	<target name="run-quick-tests" description="Run Quick tests" depends="-load-ant-contrib,build">
		<bwubuild:run-bwunit-tests phase="quick" />
    <echo message=">>> Invoked bwunit tests" />
		<subant target="run-quick-tests">
			<fileset dir="Examples" includes="*/build.xml" />
		</subant>
    <echo message=">>> Invoked sub project tests" />
	</target>

	<target name="report-quick-tests"
	        description="Run Quick tests and create a JUnit compatible report"
	        depends="-load-ant-contrib,build">
		<bwubuild:report-bwunit-tests phase="quick" />
		<!--subant target="report-quick-tests">
			<fileset dir="Examples" includes="*/build.xml" />
		</subant-->
	</target>

	<target name="run-uat-tests" description="Run UATs" depends="-load-ant-contrib,build">
		<bwubuild:run-bwunit-tests phase="uat" />
		<subant target="run-uat-tests">
			<fileset dir="Examples" includes="*/build.xml" />
		</subant>
	</target>

	<target name="report-uat-tests"
	        description="Run UATs and create a JUnit compatible report"
	        depends="-load-ant-contrib,build">
		<bwubuild:report-bwunit-tests phase="uat" />
		<subant target="report-uat-tests">
			<fileset dir="Examples" includes="*/build.xml" />
		</subant>
	</target>

	<target name="pre-commit" description="Run pre-commit tests" depends="run-quick-tests" />

	<target name="post-commit" description="Run post-commit tests" depends="report-quick-tests" />

	<macrodef name="list" uri="org.windyroad.assembla.milestone">
		<sequential>
			<exec executable="curl" dir="." failonerror="true">
				<arg value='--config' />
				<arg value='${user.home}/.curlrc' />
				<arg value='-k' />
				<arg value='-X' />
				<arg value='GET' />
				<arg value='-H' />
				<arg value='Accept: application/xml' />
				<arg value='https://www.assembla.com/spaces/milestones/all/bwunit' />
				<arg value='-o' />
				<arg value='build/milestones.xml' />
			</exec>
		</sequential>
	</macrodef>

	<macrodef name="create" uri="org.windyroad.assembla.milestone">
		<attribute name="version" />
		<sequential>
			<exec executable="curl" dir="." failonerror="true">
				<arg value='--config' />
				<arg value='${user.home}/.curlrc' />
				<arg value='-k' />
				<arg value='-X' />
				<arg value='POST' />
				<arg value='-H' />
				<arg value='Accept: application/xml' />
				<arg value='https://www.assembla.com/spaces/rest4BW/milestones' />
				<arg value='-F' />
				<arg value='milestone[title]=v@{version}' />
				<arg value='-o' />
				<arg value='build/milestone-@{version}.xml' />
			</exec>
			<xmlproperty file="build/milestone-@{version}.xml" keepRoot="false" prefix="milestone.@{version}" />
			<echoproperties prefix="milestone.@{version}">
			</echoproperties>
			<echo>Milestone '@{version}' id: ${milestone.@{version}.id}</echo>
		</sequential>
	</macrodef>

	<macrodef name="get" uri="org.windyroad.assembla.milestone">
		<attribute name="version" />
		<sequential>
			<!--
            Assembla doesn't provide an option to get a milestone by it's title, so we get them all
            and pick out the one we want. 
            -->
			<milestone:list />
			<tibant:xslt in="build/milestones.xml"
			             out="build/milestone-@{version}.xml"
			             style="util/xslt/get-milestone.xslt"
			             classpath="${saxon.jar.path}">
				<arg value="title=v@{version}" />
			</tibant:xslt>
			<xmlproperty file="build/milestone-@{version}.xml" keepRoot="false" prefix="milestone.@{version}" />
			<echoproperties prefix="milestone.@{version}">
			</echoproperties>
			<echo>Milestone '@{version}' id: ${milestone.@{version}.id}</echo>
		</sequential>
	</macrodef>

	<macrodef name="get-create" uri="org.windyroad.assembla.milestone">
		<attribute name="version" />
		<sequential>
			<milestone:get version="@{version}" />
			<if>
				<not>
					<isset property="milestone.@{version}.id" />
				</not>
				<then>
					<milestone:create version="@{version}" />
				</then>
			</if>
		</sequential>
	</macrodef>

	<macrodef name="close" uri="org.windyroad.assembla.milestone">
		<attribute name="version" />
		<sequential>
			<tstamp>
				<format property="milestone[due_date]" pattern="yyyy/MM/dd" />
			</tstamp>
			<echo file="build/release-notes-@{version}.txt">[[url:https://www.assembla.com/spaces/rest4BW/tickets/custom_report/28347|Closed Defects and Implemented Features]]
Source Code Revision ${mercurial.revision}</echo>
			<loadfile property="milestone.@{version}.releasenotes" srcfile="build/release-notes-@{version}.txt" />
			<exec executable="curl" dir="." failonerror="true">
				<arg value='--config' />
				<arg value='${user.home}/.curlrc' />
				<arg value='-k' />
				<arg value='-X' />
				<arg value='PUT' />
				<arg value='-H' />
				<arg value='Accept: application/xml' />
				<arg value='http://www.assembla.com/spaces/rest4BW/milestones/${milestone.@{version}.id}' />
				<arg value='-F' />
				<arg value='milestone[is_completed]=1' />
				<arg value='-F' />
				<arg value='milestone[due_date]=${milestone[due_date]}' />
				<arg value='-F' />
				<arg value='"milestone[release_level]=3' />
                <arg value='-F' />
                <arg value='milestone[release_notes]=${milestone.@{version}.releasenotes}' />
                <arg value='-o' />
                <arg value='build/close-milestone-@{version}.xml' />
            </exec>
        </sequential>
    </macrodef>

    <macrodef name="delete" uri="org.windyroad.assembla.milestone">
        <attribute name="id" />
        <sequential>
            <exec executable="curl" dir="." failonerror="true">
                <arg value='--config' />
                <arg value='${user.home}/.curlrc' />
                <arg value='-k' />
                <arg value='-X' />
                <arg value='DELETE' />
                <arg value='-H' />
                <arg value='Accept: application/xml' />
                <arg value='http://www.assembla.com/spaces/rest4BW/milestones/@{id}' />
                <arg value='-o' />
                <arg value='build/delete-milestone-@{id}.xml' />
            </exec>
        </sequential>
    </macrodef>

    <macrodef name="attach" uri="org.windyroad.assembla.milestone">
        <attribute name="version" />
        <sequential>
            <!-- TODO: move the retrieve into it's own macro or target -->
            <ivy:retrieve organisation="${ivy.organisation}"
                          module="${ivy.module}"
                          revision="@{version}"
                          inline="true"
                          transitive="false"
                          sync="true"
                          pattern="build/upload/[artifact]-v[revision].[ext]" />
            <milestone:get-create version="@{version}" />
            <for param="file">
                <fileset dir="build/upload" includes="*" />
                <sequential>
                    <basename file="@{file}" property="upload.basename" />
                    <exec executable="curl" dir="build/upload" failonerror="true">
                        <arg value='--config' />
                        <arg value='${user.home}/.curlrc' />
                        <arg value='-k' />
                        <arg value='-X' />
                        <arg value='POST' />
                        <arg value='-H' />
                        <arg value='Accept: application/xml' />
                        <arg value='-F' />
                        <arg value='document[attachable_id]=${milestone.@{version}.id}' />
                        <arg value='-F' />
                        <arg value='document[attachable_type]=Milestone' />
                        <arg value='-F' />
                        <arg value='document[file]=@${upload.basename}' />
                        <arg value='https://www.assembla.com/spaces/rest4BW/documents' />
                    </exec>
                    <var name="upload.basename" unset="true" />
                </sequential>
            </for>
        </sequential>
    </macrodef>

    <macrodef name="post" uri="org.windyroad.wordpress">
        <attribute name="version" />
        <sequential>
            <echo file="build/post.xml">&lt;?xml version="1.0"?&gt;
&lt;entry xmlns="http://www.w3.org/2005/Atom" xmlns:app="http://www.w3.org/2007/app"&gt;
    &lt;title&gt;${ant.project.name}™ v@{version} Released&lt;/title&gt;
    &lt;id /&gt;
    &lt;updated /&gt;
    &lt;author /&gt;
    &lt;app:control&gt;
        &lt;app:draft&gt;no&lt;/app:draft&gt;
    &lt;/app:control&gt;
    &lt;content type="xhtml" xml:lang="en"&gt;
        &lt;p xmlns="http://www.w3.org/1999/xhtml"&gt;
            &lt;a href="https://windyroad.assembla.com/spaces/rest4BW/milestones/${milestone.@{version}.id}"&gt;${ant.project.name} v@{version}&lt;/a&gt; has been released. For details, please see the &lt;a href="https://windyroad.assembla.com/spaces/rest4BW/tickets/custom_report/28347"&gt;Closed Defects and Implemented Features List&lt;/a&gt;.&lt;/p&gt;
    &lt;/content&gt;
    &lt;category scheme="http://windyroad.org" term="News" /&gt;
    &lt;category scheme="http://windyroad.org" term="Software Releases" /&gt;
    &lt;category scheme="http://windyroad.org" term="TIBCO" /&gt;
&lt;/entry&gt;</echo>
            <exec executable="curl" dir="." failonerror="true">
                <arg value='--config' />
                <arg value='${user.home}/.curlrc' />
                <arg value='-k' />
                <arg value='-X' />
                <arg value='POST' />
                <arg value='-H' />
                <arg value='Accept: application/xml' />
                <arg value='-H' />
                <arg value='Content-Type: application/atom+xml' />
                <arg value='-d' />
                <arg value='@build/post.xml' />
                <arg value='http://windyroad.org/core/wp-app.php/posts' />
            </exec>
        </sequential>
    </macrodef>

    <macrodef name="get-closed-no-milestone" uri="org.windyroad.assembla.ticket">
        <sequential>
            <exec executable="curl" dir="." failonerror="true">
                <arg value='--config' />
                <arg value='${user.home}/.curlrc' />
                <arg value='-k' />
                <arg value='-X' />
                <arg value='GET' />
                <arg value='-H' />
                <arg value='Accept: application/xml' />
                <arg value='https://www.assembla.com/spaces/rest4BW/tickets/custom_report/167263' />
                <arg value='-o' />
                <arg value='build/tickets.xml' />
            </exec>
        </sequential>
    </macrodef>
    
    <macrodef name="assign-to-milestone" uri="org.windyroad.assembla.ticket">
        <attribute name="tickets" default="build/tickets.xml" />
        <attribute name="version" />
        <sequential>
            <tibant:xslt in="@{tickets}"
                         out="build/tickets-shell.xml"
                         style="util/xslt/split-tickets.xslt"
                         classpath="${saxon.jar.path}">
            </tibant:xslt>
            <for param="ticket-file">
                <fileset dir="build" includes="ticket-*.xml" />
                <sequential>
                    <xmlproperty file="@{ticket-file}" keepRoot="false" prefix="ticket.@{ticket-file}" />
                    <exec executable="curl" dir="." failonerror="true">
                        <arg value='--config' />
                        <arg value='${user.home}/.curlrc' />
                        <arg value='-k' />
                        <arg value='-X' />
                        <arg value='PUT' />
                        <arg value='-H' />
                        <arg value='Accept: application/xml' />
                        <arg value='http://www.assembla.com/spaces/rest4BW/tickets/${ticket.@{ticket-file}.number}' />
                        <arg value='-F' />
                        <arg value='ticket[milestone_id]=${milestone.@{version}.id}' />
                        <arg value='-o' />
                        <arg value='build/assign-ticket-${ticket.@{ticket-file}.number}.xml' />
                    </exec>
                </sequential>
            </for>
        </sequential>
    </macrodef>
    
    <macrodef name="upload" uri="org.windyroad.assembla">
    <attribute name="version" />
    <sequential>
        <trycatch property="upload.error">
            <try>
                <milestone:attach version="@{version}" />
            </try>
            <catch>
                <if>
                    <isset property="milestone.@{version}.id" />
                    <then>
                        <milestone:delete id="${milestone.@{version}.id}" />
                    </then>
                </if>
                <fail message="upload failed: ${upload.error}" />
            </catch>
        </trycatch>
    </sequential>
    </macrodef>
    
    <target name="upload-to-assembla" depends="-load-ant-contrib">
        <assembla:upload version="${release.version}" />
        <!-- also need to copy documentation to WR site. assembla:upload already retrieves
             what needs to be uploaded, so we just need to do the scp -->

        <!-- TODO: Move into own target -->
        <!-- this crap is to get scp loaded properly -->
        <available property="ant-jsch.present" file="${ant.home}/lib/ant-jsch.jar" />
        <fail if="ant-jsch.present"
              message="Please remove ant-jsch.jar from ${ant.home}/lib see [http://ant.apache.org/faq.html#delegating-classloader]" />

        <taskdef name="scp" classname="org.apache.tools.ant.taskdefs.optional.ssh.Scp">
            <classpath>
                <fileset dir=".">
                        <include name="lib/*.jar" />
                </fileset>
            </classpath>
        </taskdef>

        <!-- yay. here we finally do the scp -->
        <scp localFile="build/upload/${ant.project.name}-User-Guide-v${release.version}.html"
             remoteTofile="${wr.site.username}@s25627.gridserver.com:${wr.site.path}/static/${ant.project.name}-User-Guide.html"
             password="${wr.site.password}"
             trust="true"
             failonerror="true" />
    </target>
    
    <target name="upload-docs-to-website" depends="-load-ant-contrib">
        <fail unless="wr.site.username" message="Property 'wr.site.username' must be specified!" />
        <fail unless="wr.site.password" message="Property 'wr.site.password' must be specified!" />
        <fail unless="wr.site.path" message="Property 'wr.site.path' must be specified!" />

        <!-- this crap is to get scp loaded properly -->
        <available property="ant-jsch.present" file="${ant.home}/lib/ant-jsch.jar" />
        <fail if="ant-jsch.present"
              message="Please remove ant-jsch.jar from ${ant.home}/lib see [http://ant.apache.org/faq.html#delegating-classloader]" />

        <taskdef name="scp" classname="org.apache.tools.ant.taskdefs.optional.ssh.Scp">
            <classpath>
                <fileset dir=".">
                        <include name="lib/*.jar" />
                </fileset>
            </classpath>
        </taskdef>

        <!-- yay. here we finally do the scp -->
        <scp todir="${wr.site.username}@s25627.gridserver.com:${wr.site.path}/static/"
             password="${wr.site.password}"
             trust="true"
             failonerror="true">
          <fileset dir="${basedir}/docs"/>
        </scp>
    </target>
    
    <target name="close-assembla-milestone" depends="-load-ant-contrib">
    <mkdir dir="build" />
    <ticket:get-closed-no-milestone />
    <milestone:get-create version="${release.version}" />
    <ticket:assign-to-milestone version="${release.version}" />
    <milestone:close version="${release.version}" />
    </target>
    
    <target name="notify-release" depends="-load-ant-contrib">
        <wp:post version="${release.version}" />
    </target>
        	

	<target name="clean-local" description="">
		<delete dir="${user.home}/.ivy2/local" verbose="true" />
	</target>


</project>
