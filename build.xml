<?xml version="1.0" encoding="UTF-8"?>
<project default="help"
         name="rest4BW"
         xmlns="antlib:org.apache.tools.ant"
         xmlns:bwubuild="org.windyroad.bwunit.build"
         xmlns:bwunit="org.windyroad.bwunit"
         xmlns:tibant="org.windyroad.tibant"
         xmlns:assembla="org.windyroad.assembla"
         xmlns:ivy="antlib:org.apache.ivy.ant"
         xmlns:milestone="org.windyroad.assembla.milestone"
         xmlns:ticket="org.windyroad.assembla.ticket"
         xmlns:wp="org.windyroad.wordpress">


	<defaultexcludes echo="false" add="**/*.hg" />
	<defaultexcludes echo="false" add="**/*.hg/**" />

	<import file="util/assembla.xml" />
	<import file="util/wordpress.xml" />
	<import file="util/bwunit.xml" />

	<target name="help">
		<exec executable="${ant.home}/bin/ant">
			<arg value="-projecthelp" />
			<arg value="-buildfile" />
			<arg value="${ant.file}" />
		</exec>
	</target>

	<target name="validate" depends="-load-ant-contrib">
		<bwunit:validate-project dir="src/main/bw" project="rest4BW" max-warnings="0" create-dtl-file="true" />
	</target>

	<target name="projlib" depends="-load-ant-contrib,validate">
		<tibant:build-library lib="/Build/rest4BW"
		                      dir="src/main/bw"
		                      project="rest4BW"
		                      out="${rest4BW.projlib}"
		                      validate="false"
		                      create-dtl-file="true" />
	</target>

	<target name="init">
		<mkdir dir="build" />
	</target>



	<target name="check-version" depends="-determine-version" description="" />

	<macrodef name="check-dir-exists" description="Checks whether a directory exists.">
		<attribute name="dir" />
		<attribute name="reportonly" default="false" />
		<sequential>
			<if>
				<not>
					<available file="@{dir}" />
				</not>
				<then>
					<if>
						<istrue value="@{reportonly}" />
						<then>
							<echo message="WARN: The directory '@{dir}' does not exist!" />
						</then>
						<else>
							<fail message="ERROR: The directory '@{dir}' does not exist!" />
						</else>
					</if>
				</then>
			</if>
		</sequential>
	</macrodef>

	<macrodef name="check-tibco-config" description="Checks whether tibco home directories exist.">
		<attribute name="reportonly" default="false" />
		<sequential>
			<propertyselector property="tmp_tibco_dirs" match="tibco\.home\.(.*)" select="\1" />
			<for list="${tmp_tibco_dirs}" param="id">
				<sequential>
					<if>
						<not>
							<equals arg1="@{id}" arg2="jre" />
						</not>
						<then>
							<check-dir-exists dir="${tibco.home.@{id}}" reportonly="@{reportonly}" />
						</then>
					</if>
				</sequential>
			</for>
		</sequential>
	</macrodef>

	<target name="report-tibco-config"
	        depends="-load-ant-contrib"
	        description="Reports whether the tibco.home.* properties have been correctly configured.">
		<check-tibco-config reportonly="true" />
	</target>

	<target name="-assert-tibco-config"
	        description="Validates whether the tibco.home.* properties have been correctly configured.">
		<check-tibco-config />
	</target>

	<target name="designer"
	        depends="-load-ant-contrib,-assert-tibco-config"
	        description="Launch ${ant.project.name} in TIBCO Designer">
		<bwunit:designer dir="src/main/bw"
		                 project="rest4BW"
		                 create-dtl-file="true"
		                 custom-cp-ext="%EXISTING-VALUE%${path.separator}${dep.h2.h2.jar}" />
	</target>

	<target name="clean" description="">
		<delete dir="build" verbose="true" />
		<delete dir="logs" verbose="true" />
		<delete verbose="true">
			<fileset dir="src/main/bw" includes="**/.designtimelibs" />
		</delete>
		<delete dir="working" verbose="true" />
		<subant target="clean">
			<fileset dir="examples" includes="**/build.xml" />
		</subant>
	</target>

	<target name="clean-lib" description="">
		<delete dir="lib" verbose="true" />
	</target>

	<target name="clean-all" depends="clean,clean-lib" description="" />

	<target name="build" depends="projlib" description="Build binaries" />

	<target name="doc" description="builds user guide" depends="-load-ant-contrib,-determine-version">
		<mkdir dir="build" />
		<bwubuild:gen-doc in="util/bwunit.xml"
		                  out="build/${ant.project.name}-User-Guide.html"
		                  version="${releases.new.revision}" />
	</target>



	<!-- we valdate the projlib by running validate on the coffee-shop. If there are problems with
	the projlib then the coffee shop wont validate -->
	<target name="validate-projlib" depends="projlib" description="Validate the compiled projlib">
		<subant target="validate" >
			<fileset dir="examples/coffee-shop" includes="build.xml"/>
		</subant>
	</target>


    <!-- for pre-commit, we validate the projlib, which will validate and build the projlib and then
    validate the coffee-shop using the built projlib. If all that is good, then it will run the quick tests -->
	<target name="pre-commit" description="Run pre-commit tests" depends="validate-projlib,run-quick-tests">
	</target>

    <!-- for post-commit, we validate the projlib, which will validate and build the projlib and then
    validate the coffee-shop using the built projlib. If all that is good, then it will run the quick tests -->
	<target name="post-commit" description="Run post-commit tests" depends="validate-projlib,report-quick-tests">
	</target>

	<target name="upload-docs-to-website" depends="-load-ant-contrib,-init-scp">
		<echo>Uploading 'docs' to the public website</echo>
		<upload-to-website>
			<files>
				<fileset dir="docs" />
			</files>
		</upload-to-website>
	</target>

	<target name="upload-artifacts-to-website" depends="-init-scp,-determine-version">
		<echo>Uploading 'build/${ivy.module}-bin-v${releases.revision}.zip' to the public website...</echo>
		<upload-to-website subdir="releases">
			<files>
				<fileset dir="build" includes="${ivy.module}-bin-v${releases.revision}.zip" />
				<fileset dir="build" includes="${ivy.module}-src-v${releases.revision}.zip" />
			</files>
		</upload-to-website>
	</target>

	<target name="dist" depends="dist-bin,dist-src" description="creates distributable artifacts for the current build">
	</target>

	<target name="dist-src" depends="-determine-version">
		<delete file="build/${ivy.module}-src.zip" />
		<zip destfile="build/${ivy.module}-src.zip">
			<zipfileset dir="docs" prefix="docs" />
			<zipfileset dir="config" prefix="config" includes="default.properties,ivysettings.xml" />
			<zipfileset dir="examples/coffee-shop" prefix="examples/coffee-shop" />
			<zipfileset dir="util" prefix="util" />
			<zipfileset dir="." includes="LICENSE.txt,build.xml,ivy.xml" />
			<zipfileset dir="src" prefix="src" />
		</zip>
	</target>

	<target name="dist-bin" depends="-determine-version,build">
		<delete file="build/${ivy.module}-bin.zip" />
		<zip destfile="build/${ivy.module}-bin.zip">
			<zipfileset dir="docs" prefix="docs" />
			<zipfileset dir="config" prefix="config" includes="default.properties,ivysettings.xml" />
			<zipfileset dir="examples/coffee-shop" prefix="examples/coffee-shop" />
			<zipfileset dir="." includes="LICENSE.txt,build.xml,ivy.xml" />
			<zipfileset dir="util" prefix="util" excludes="assembla.xml,wordpress.xml" />
			<zipfileset dir="lib" fullpath="${ivy.module}.projlib" includes="${ivy.module}.projlib" />
		</zip>
	</target>

	<target name="retrieve-latest-release" depends="-determine-version">
		<echo>Retrieving latest '${ivy.module}' release...</echo>
		<ivy:retrieve organisation="${ivy.organisation}"
		              module="${ivy.module}"
		              revision="${releases.revision}"
		              inline="true"
		              transitive="false"
		              conf="default" />
	</target>

	<target name="-init-scp" depends="-load-ant-contrib">
		<!-- this crap is to get scp loaded properly -->
		<available property="ant-jsch.present" file="${ant.home}/lib/ant-jsch.jar" />
		<fail if="ant-jsch.present"
		      message="Please remove ant-jsch.jar from ${ant.home}/lib see [http://ant.apache.org/faq.html#delegating-classloader]" />
		<taskdef name="scp" classname="org.apache.tools.ant.taskdefs.optional.ssh.Scp">
			<classpath>
				<fileset dir="lib" includes="*.jar" />
			</classpath>
		</taskdef>
		<property name="scp.initialised" value="true" />
	</target>

	<macrodef name="upload-to-website" description="">
		<attribute name="subdir" default="" description="" />
		<element name="files" description="" />
		<sequential>
			<fail unless="scp.initialised" message="'-init-scp' target must be invoked first!" />
			<fail unless="wr.site.username" message="Property 'wr.site.username' must be specified!" />
			<fail unless="wr.site.password" message="Property 'wr.site.password' must be specified!" />
			<fail unless="wr.site.path" message="Property 'wr.site.path' must be specified!" />
			<scp todir="${wr.site.username}@s25627.gridserver.com:${wr.site.path}/static/@{subdir}"
			     password="${wr.site.password}"
			     trust="true"
			     failonerror="true">
				<files />
			</scp>
		</sequential>
	</macrodef>

	<target name="close-assembla-milestone" depends="-load-ant-contrib">
		<mkdir dir="build" />
		<ticket:get-closed-no-milestone space="rest4BW" />
		<milestone:get-create version="${release.version}" space="rest4BW" />
		<ticket:assign-to-milestone version="${release.version}" space="rest4BW" />
		<milestone:close version="${release.version}" space="rest4BW" />
	</target>

	<target name="notify-release" depends="-load-ant-contrib">
		<wp:post version="${release.version}" />
	</target>


	<target name="clean-local" description="">
		<delete dir="${user.home}/.ivy2/local" verbose="true" />
	</target>

	<target name="add-watcher" description="Adds the given email as a watcher to the project.">
		<fail unless="assembla.username" message="Property 'assembla.username' must be set." />
		<fail unless="assembla.password" message="Property 'assembla.password' must be set." />
		<fail unless="assembla.member" message="Property 'assembla.member' must be set." />
		<assembla:add-watcher space="rest4BW"
		                      username="${assembla.username}"
		                      password="${assembla.password}"
		                      member="${assembla.member}" />
	</target>

	<target name="remove-watcher" description="Removes the given member (login) from the project.">
		<fail unless="assembla.username" message="Property 'assembla.username' must be set." />
		<fail unless="assembla.password" message="Property 'assembla.password' must be set." />
		<fail unless="assembla.member" message="Property 'assembla.member' must be set." />
		<assembla:remove-member space="rest4BW"
		                        username="${assembla.username}"
		                        password="${assembla.password}"
		                        member="${assembla.member}" />
	</target>

</project>
